/* tslint:disable */
/* eslint-disable */
/**
 * Daftar File Project API
 * API List of Dafter-File Project
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LoginOtp } from '../server-model';
// @ts-ignore
import type { LoginOtpRequest } from '../server-model';
// @ts-ignore
import type { LoginVerify } from '../server-model';
// @ts-ignore
import type { LoginVerifyRequest } from '../server-model';
// @ts-ignore
import type { MarkFileRecord } from '../server-model';
// @ts-ignore
import type { MarkFileRecordRequest } from '../server-model';
// @ts-ignore
import type { UserInfo } from '../server-model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} action 
         * @param {MarkFileRecordRequest} MarkFileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFileRecordCreate: async (action: string, MarkFileRecordRequest: MarkFileRecordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('usersFileRecordCreate', 'action', action)
            // verify required parameter 'MarkFileRecordRequest' is not null or undefined
            assertParamExists('usersFileRecordCreate', 'MarkFileRecordRequest', MarkFileRecordRequest)
            const localVarPath = `/fa/api/users/file-record/{action}/`
                .replace(`{${"action"}}`, encodeURIComponent(String(action)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(MarkFileRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginOtpRequest} LoginOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginOtpCreate: async (LoginOtpRequest: LoginOtpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'LoginOtpRequest' is not null or undefined
            assertParamExists('usersLoginOtpCreate', 'LoginOtpRequest', LoginOtpRequest)
            const localVarPath = `/fa/api/users/login-otp/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(LoginOtpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {LoginVerifyRequest} LoginVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginVerifyCreate: async (LoginVerifyRequest: LoginVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'LoginVerifyRequest' is not null or undefined
            assertParamExists('usersLoginVerifyCreate', 'LoginVerifyRequest', LoginVerifyRequest)
            const localVarPath = `/fa/api/users/login-verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(LoginVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserInfoRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fa/api/users/user-info/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} action 
         * @param {MarkFileRecordRequest} MarkFileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersFileRecordCreate(action: string, MarkFileRecordRequest: MarkFileRecordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarkFileRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersFileRecordCreate(action, MarkFileRecordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersFileRecordCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginOtpRequest} LoginOtpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginOtpCreate(LoginOtpRequest: LoginOtpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOtp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginOtpCreate(LoginOtpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLoginOtpCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {LoginVerifyRequest} LoginVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginVerifyCreate(LoginVerifyRequest: LoginVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginVerify>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginVerifyCreate(LoginVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersLoginVerifyCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserInfoRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserInfoRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserInfoRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UsersApiUsersFileRecordCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersFileRecordCreate(requestParameters: UsersApiUsersFileRecordCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarkFileRecord> {
            return localVarFp.usersFileRecordCreate(requestParameters.action, requestParameters.MarkFileRecordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiUsersLoginOtpCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginOtpCreate(requestParameters: UsersApiUsersLoginOtpCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginOtp> {
            return localVarFp.usersLoginOtpCreate(requestParameters.LoginOtpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {UsersApiUsersLoginVerifyCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginVerifyCreate(requestParameters: UsersApiUsersLoginVerifyCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginVerify> {
            return localVarFp.usersLoginVerifyCreate(requestParameters.LoginVerifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserInfoRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<UserInfo> {
            return localVarFp.usersUserInfoRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersFileRecordCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersFileRecordCreateRequest
 */
export interface UsersApiUsersFileRecordCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersFileRecordCreate
     */
    readonly action: string

    /**
     * 
     * @type {MarkFileRecordRequest}
     * @memberof UsersApiUsersFileRecordCreate
     */
    readonly MarkFileRecordRequest: MarkFileRecordRequest
}

/**
 * Request parameters for usersLoginOtpCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginOtpCreateRequest
 */
export interface UsersApiUsersLoginOtpCreateRequest {
    /**
     * 
     * @type {LoginOtpRequest}
     * @memberof UsersApiUsersLoginOtpCreate
     */
    readonly LoginOtpRequest: LoginOtpRequest
}

/**
 * Request parameters for usersLoginVerifyCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersLoginVerifyCreateRequest
 */
export interface UsersApiUsersLoginVerifyCreateRequest {
    /**
     * 
     * @type {LoginVerifyRequest}
     * @memberof UsersApiUsersLoginVerifyCreate
     */
    readonly LoginVerifyRequest: LoginVerifyRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiUsersFileRecordCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersFileRecordCreate(requestParameters: UsersApiUsersFileRecordCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersFileRecordCreate(requestParameters.action, requestParameters.MarkFileRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersLoginOtpCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginOtpCreate(requestParameters: UsersApiUsersLoginOtpCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginOtpCreate(requestParameters.LoginOtpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {UsersApiUsersLoginVerifyCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersLoginVerifyCreate(requestParameters: UsersApiUsersLoginVerifyCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersLoginVerifyCreate(requestParameters.LoginVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserInfoRetrieve(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserInfoRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}

