/* tslint:disable */
/* eslint-disable */
/**
 * Daftar File Project API
 * API List of Dafter-File Project
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EstateTag } from '../server-model';
// @ts-ignore
import type { FileRecord } from '../server-model';
// @ts-ignore
import type { FileRecordRequest } from '../server-model';
// @ts-ignore
import type { FileRecordRetrieve } from '../server-model';
// @ts-ignore
import type { Image } from '../server-model';
// @ts-ignore
import type { ImageRequest } from '../server-model';
// @ts-ignore
import type { PaginatedFileRecordListList } from '../server-model';
// @ts-ignore
import type { PatchedFileRecordRequest } from '../server-model';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FileRecordRequest} FileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileCreate: async (FileRecordRequest: FileRecordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'FileRecordRequest' is not null or undefined
            assertParamExists('filesFileCreate', 'FileRecordRequest', FileRecordRequest)
            const localVarPath = `/fa/api/files/file/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(FileRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} file_number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileDestroy: async (file_number: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file_number' is not null or undefined
            assertParamExists('filesFileDestroy', 'file_number', file_number)
            const localVarPath = `/fa/api/files/file/{file_number}`
                .replace(`{${"file_number"}}`, encodeURIComponent(String(file_number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [bookmarked] نشان شده
         * @param {number} [city] شهر
         * @param {number} [construction_year_max] سال ساخت
         * @param {number} [construction_year_min] سال ساخت
         * @param {string} [created_at_after] تاریخ ایجاد
         * @param {string} [created_at_before] تاریخ ایجاد
         * @param {number} [district] محله
         * @param {FilesFileListEstateDirectionEnum} [estate_direction] جهت ملک  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;TRIPLE_CORNERS&#x60; - سه نبشه
         * @param {string} [estate_owner_name] نام مالک
         * @param {string} [estate_owner_phone] شماره  صاحب ملک
         * @param {Array<number>} [estate_tags] برچسب های ملک
         * @param {FilesFileListEstateTypeEnum} [estate_type] نوع ملک  * &#x60;APARTMENT&#x60; - آپارتمان * &#x60;HOUSE&#x60; - خانه/ویلا * &#x60;LAND&#x60; - زمین * &#x60;COMMERCIAL&#x60; - اداری/تجاری
         * @param {FilesFileListFileSourceEnum} [file_source] File Source  * &#x60;DIVAR&#x60; - دیوار * &#x60;DAFTAR_FILE&#x60; - دفتر فایل
         * @param {number} [floors_count_max] تعداد طبقات
         * @param {number} [floors_count_min] تعداد طبقات
         * @param {boolean} [has_document] سند دارد؟
         * @param {boolean} [has_elevator] آسانسور دارد؟
         * @param {boolean} [has_license] جواز دارد؟
         * @param {boolean} [has_termination] پایان کار دارد؟
         * @param {boolean} [has_warehouse] انباری دارد؟
         * @param {number} [land_meterage_max] متراژ زمین
         * @param {number} [land_meterage_min] متراژ زمین
         * @param {number} [mortgage_price_max] قیمت رهن
         * @param {number} [mortgage_price_min] قیمت رهن
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {number} [per_meter_price_max] قیمت هر متر
         * @param {number} [per_meter_price_min] قیمت هر متر
         * @param {number} [rent_price_max] قیمت اجاره
         * @param {number} [rent_price_min] قیمت اجاره
         * @param {FilesFileListRoomsCountEnum} [rooms_count] تعداد اتاق خواب  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
         * @param {string} [search] جستجو
         * @param {FilesFileListToiletsCountEnum} [toilets_count] تعداد سرویس بهداشتی  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
         * @param {number} [total_price_max] قیمت کل
         * @param {number} [total_price_min] قیمت کل
         * @param {FilesFileListTradeTypeEnum} [trade_type] نوع معامله  * &#x60;BUY_SELL&#x60; - خرید و فروش * &#x60;RENT_CREDIT&#x60; -  رهن و اجاره
         * @param {FilesFileListUnitDirectionEnum} [unit_direction] جهت واحد  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;MIDDLE&#x60; - میانی
         * @param {number} [unit_meterage_max] متراژ واحد
         * @param {number} [unit_meterage_min] متراژ واحد
         * @param {number} [units_per_floor_number_max] تعداد واحد در هر طبقه
         * @param {number} [units_per_floor_number_min] تعداد واحد در هر طبقه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileList: async (bookmarked?: boolean, city?: number, construction_year_max?: number, construction_year_min?: number, created_at_after?: string, created_at_before?: string, district?: number, estate_direction?: FilesFileListEstateDirectionEnum, estate_owner_name?: string, estate_owner_phone?: string, estate_tags?: Array<number>, estate_type?: FilesFileListEstateTypeEnum, file_source?: FilesFileListFileSourceEnum, floors_count_max?: number, floors_count_min?: number, has_document?: boolean, has_elevator?: boolean, has_license?: boolean, has_termination?: boolean, has_warehouse?: boolean, land_meterage_max?: number, land_meterage_min?: number, mortgage_price_max?: number, mortgage_price_min?: number, page?: number, page_size?: number, per_meter_price_max?: number, per_meter_price_min?: number, rent_price_max?: number, rent_price_min?: number, rooms_count?: FilesFileListRoomsCountEnum, search?: string, toilets_count?: FilesFileListToiletsCountEnum, total_price_max?: number, total_price_min?: number, trade_type?: FilesFileListTradeTypeEnum, unit_direction?: FilesFileListUnitDirectionEnum, unit_meterage_max?: number, unit_meterage_min?: number, units_per_floor_number_max?: number, units_per_floor_number_min?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fa/api/files/file/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (bookmarked !== undefined) {
                localVarQueryParameter['bookmarked'] = bookmarked;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (construction_year_max !== undefined) {
                localVarQueryParameter['construction_year_max'] = construction_year_max;
            }

            if (construction_year_min !== undefined) {
                localVarQueryParameter['construction_year_min'] = construction_year_min;
            }

            if (created_at_after !== undefined) {
                localVarQueryParameter['created_at_after'] = (created_at_after as any instanceof Date) ?
                    (created_at_after as any).toISOString().substring(0,10) :
                    created_at_after;
            }

            if (created_at_before !== undefined) {
                localVarQueryParameter['created_at_before'] = (created_at_before as any instanceof Date) ?
                    (created_at_before as any).toISOString().substring(0,10) :
                    created_at_before;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (estate_direction !== undefined) {
                localVarQueryParameter['estate_direction'] = estate_direction;
            }

            if (estate_owner_name !== undefined) {
                localVarQueryParameter['estate_owner_name'] = estate_owner_name;
            }

            if (estate_owner_phone !== undefined) {
                localVarQueryParameter['estate_owner_phone'] = estate_owner_phone;
            }

            if (estate_tags) {
                localVarQueryParameter['estate_tags'] = estate_tags;
            }

            if (estate_type !== undefined) {
                localVarQueryParameter['estate_type'] = estate_type;
            }

            if (file_source !== undefined) {
                localVarQueryParameter['file_source'] = file_source;
            }

            if (floors_count_max !== undefined) {
                localVarQueryParameter['floors_count_max'] = floors_count_max;
            }

            if (floors_count_min !== undefined) {
                localVarQueryParameter['floors_count_min'] = floors_count_min;
            }

            if (has_document !== undefined) {
                localVarQueryParameter['has_document'] = has_document;
            }

            if (has_elevator !== undefined) {
                localVarQueryParameter['has_elevator'] = has_elevator;
            }

            if (has_license !== undefined) {
                localVarQueryParameter['has_license'] = has_license;
            }

            if (has_termination !== undefined) {
                localVarQueryParameter['has_termination'] = has_termination;
            }

            if (has_warehouse !== undefined) {
                localVarQueryParameter['has_warehouse'] = has_warehouse;
            }

            if (land_meterage_max !== undefined) {
                localVarQueryParameter['land_meterage_max'] = land_meterage_max;
            }

            if (land_meterage_min !== undefined) {
                localVarQueryParameter['land_meterage_min'] = land_meterage_min;
            }

            if (mortgage_price_max !== undefined) {
                localVarQueryParameter['mortgage_price_max'] = mortgage_price_max;
            }

            if (mortgage_price_min !== undefined) {
                localVarQueryParameter['mortgage_price_min'] = mortgage_price_min;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (per_meter_price_max !== undefined) {
                localVarQueryParameter['per_meter_price_max'] = per_meter_price_max;
            }

            if (per_meter_price_min !== undefined) {
                localVarQueryParameter['per_meter_price_min'] = per_meter_price_min;
            }

            if (rent_price_max !== undefined) {
                localVarQueryParameter['rent_price_max'] = rent_price_max;
            }

            if (rent_price_min !== undefined) {
                localVarQueryParameter['rent_price_min'] = rent_price_min;
            }

            if (rooms_count !== undefined) {
                localVarQueryParameter['rooms_count'] = rooms_count;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (toilets_count !== undefined) {
                localVarQueryParameter['toilets_count'] = toilets_count;
            }

            if (total_price_max !== undefined) {
                localVarQueryParameter['total_price_max'] = total_price_max;
            }

            if (total_price_min !== undefined) {
                localVarQueryParameter['total_price_min'] = total_price_min;
            }

            if (trade_type !== undefined) {
                localVarQueryParameter['trade_type'] = trade_type;
            }

            if (unit_direction !== undefined) {
                localVarQueryParameter['unit_direction'] = unit_direction;
            }

            if (unit_meterage_max !== undefined) {
                localVarQueryParameter['unit_meterage_max'] = unit_meterage_max;
            }

            if (unit_meterage_min !== undefined) {
                localVarQueryParameter['unit_meterage_min'] = unit_meterage_min;
            }

            if (units_per_floor_number_max !== undefined) {
                localVarQueryParameter['units_per_floor_number_max'] = units_per_floor_number_max;
            }

            if (units_per_floor_number_min !== undefined) {
                localVarQueryParameter['units_per_floor_number_min'] = units_per_floor_number_min;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} file_number 
         * @param {PatchedFileRecordRequest} [PatchedFileRecordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFilePartialUpdate: async (file_number: number, PatchedFileRecordRequest?: PatchedFileRecordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file_number' is not null or undefined
            assertParamExists('filesFilePartialUpdate', 'file_number', file_number)
            const localVarPath = `/fa/api/files/file/{file_number}`
                .replace(`{${"file_number"}}`, encodeURIComponent(String(file_number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedFileRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} file_number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileRetrieve: async (file_number: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file_number' is not null or undefined
            assertParamExists('filesFileRetrieve', 'file_number', file_number)
            const localVarPath = `/fa/api/files/file/{file_number}`
                .replace(`{${"file_number"}}`, encodeURIComponent(String(file_number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} file_number 
         * @param {FileRecordRequest} FileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileUpdate: async (file_number: number, FileRecordRequest: FileRecordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file_number' is not null or undefined
            assertParamExists('filesFileUpdate', 'file_number', file_number)
            // verify required parameter 'FileRecordRequest' is not null or undefined
            assertParamExists('filesFileUpdate', 'FileRecordRequest', FileRecordRequest)
            const localVarPath = `/fa/api/files/file/{file_number}`
                .replace(`{${"file_number"}}`, encodeURIComponent(String(file_number)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(FileRecordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTagList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fa/api/files/tag/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImageRequest} ImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesUploadImageCreate: async (ImageRequest: ImageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ImageRequest' is not null or undefined
            assertParamExists('filesUploadImageCreate', 'ImageRequest', ImageRequest)
            const localVarPath = `/fa/api/files/upload/image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ImageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FileRecordRequest} FileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileCreate(FileRecordRequest: FileRecordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileCreate(FileRecordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFileCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} file_number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileDestroy(file_number: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileDestroy(file_number, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFileDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [bookmarked] نشان شده
         * @param {number} [city] شهر
         * @param {number} [construction_year_max] سال ساخت
         * @param {number} [construction_year_min] سال ساخت
         * @param {string} [created_at_after] تاریخ ایجاد
         * @param {string} [created_at_before] تاریخ ایجاد
         * @param {number} [district] محله
         * @param {FilesFileListEstateDirectionEnum} [estate_direction] جهت ملک  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;TRIPLE_CORNERS&#x60; - سه نبشه
         * @param {string} [estate_owner_name] نام مالک
         * @param {string} [estate_owner_phone] شماره  صاحب ملک
         * @param {Array<number>} [estate_tags] برچسب های ملک
         * @param {FilesFileListEstateTypeEnum} [estate_type] نوع ملک  * &#x60;APARTMENT&#x60; - آپارتمان * &#x60;HOUSE&#x60; - خانه/ویلا * &#x60;LAND&#x60; - زمین * &#x60;COMMERCIAL&#x60; - اداری/تجاری
         * @param {FilesFileListFileSourceEnum} [file_source] File Source  * &#x60;DIVAR&#x60; - دیوار * &#x60;DAFTAR_FILE&#x60; - دفتر فایل
         * @param {number} [floors_count_max] تعداد طبقات
         * @param {number} [floors_count_min] تعداد طبقات
         * @param {boolean} [has_document] سند دارد؟
         * @param {boolean} [has_elevator] آسانسور دارد؟
         * @param {boolean} [has_license] جواز دارد؟
         * @param {boolean} [has_termination] پایان کار دارد؟
         * @param {boolean} [has_warehouse] انباری دارد؟
         * @param {number} [land_meterage_max] متراژ زمین
         * @param {number} [land_meterage_min] متراژ زمین
         * @param {number} [mortgage_price_max] قیمت رهن
         * @param {number} [mortgage_price_min] قیمت رهن
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {number} [per_meter_price_max] قیمت هر متر
         * @param {number} [per_meter_price_min] قیمت هر متر
         * @param {number} [rent_price_max] قیمت اجاره
         * @param {number} [rent_price_min] قیمت اجاره
         * @param {FilesFileListRoomsCountEnum} [rooms_count] تعداد اتاق خواب  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
         * @param {string} [search] جستجو
         * @param {FilesFileListToiletsCountEnum} [toilets_count] تعداد سرویس بهداشتی  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
         * @param {number} [total_price_max] قیمت کل
         * @param {number} [total_price_min] قیمت کل
         * @param {FilesFileListTradeTypeEnum} [trade_type] نوع معامله  * &#x60;BUY_SELL&#x60; - خرید و فروش * &#x60;RENT_CREDIT&#x60; -  رهن و اجاره
         * @param {FilesFileListUnitDirectionEnum} [unit_direction] جهت واحد  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;MIDDLE&#x60; - میانی
         * @param {number} [unit_meterage_max] متراژ واحد
         * @param {number} [unit_meterage_min] متراژ واحد
         * @param {number} [units_per_floor_number_max] تعداد واحد در هر طبقه
         * @param {number} [units_per_floor_number_min] تعداد واحد در هر طبقه
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileList(bookmarked?: boolean, city?: number, construction_year_max?: number, construction_year_min?: number, created_at_after?: string, created_at_before?: string, district?: number, estate_direction?: FilesFileListEstateDirectionEnum, estate_owner_name?: string, estate_owner_phone?: string, estate_tags?: Array<number>, estate_type?: FilesFileListEstateTypeEnum, file_source?: FilesFileListFileSourceEnum, floors_count_max?: number, floors_count_min?: number, has_document?: boolean, has_elevator?: boolean, has_license?: boolean, has_termination?: boolean, has_warehouse?: boolean, land_meterage_max?: number, land_meterage_min?: number, mortgage_price_max?: number, mortgage_price_min?: number, page?: number, page_size?: number, per_meter_price_max?: number, per_meter_price_min?: number, rent_price_max?: number, rent_price_min?: number, rooms_count?: FilesFileListRoomsCountEnum, search?: string, toilets_count?: FilesFileListToiletsCountEnum, total_price_max?: number, total_price_min?: number, trade_type?: FilesFileListTradeTypeEnum, unit_direction?: FilesFileListUnitDirectionEnum, unit_meterage_max?: number, unit_meterage_min?: number, units_per_floor_number_max?: number, units_per_floor_number_min?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedFileRecordListList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileList(bookmarked, city, construction_year_max, construction_year_min, created_at_after, created_at_before, district, estate_direction, estate_owner_name, estate_owner_phone, estate_tags, estate_type, file_source, floors_count_max, floors_count_min, has_document, has_elevator, has_license, has_termination, has_warehouse, land_meterage_max, land_meterage_min, mortgage_price_max, mortgage_price_min, page, page_size, per_meter_price_max, per_meter_price_min, rent_price_max, rent_price_min, rooms_count, search, toilets_count, total_price_max, total_price_min, trade_type, unit_direction, unit_meterage_max, unit_meterage_min, units_per_floor_number_max, units_per_floor_number_min, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFileList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} file_number 
         * @param {PatchedFileRecordRequest} [PatchedFileRecordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFilePartialUpdate(file_number: number, PatchedFileRecordRequest?: PatchedFileRecordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFilePartialUpdate(file_number, PatchedFileRecordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFilePartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} file_number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileRetrieve(file_number: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecordRetrieve>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileRetrieve(file_number, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFileRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} file_number 
         * @param {FileRecordRequest} FileRecordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileUpdate(file_number: number, FileRecordRequest: FileRecordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileUpdate(file_number, FileRecordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesFileUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesTagList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EstateTag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesTagList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesTagList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ImageRequest} ImageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesUploadImageCreate(ImageRequest: ImageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesUploadImageCreate(ImageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.filesUploadImageCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @param {FilesApiFilesFileCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileCreate(requestParameters: FilesApiFilesFileCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileRecord> {
            return localVarFp.filesFileCreate(requestParameters.FileRecordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesFileDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileDestroy(requestParameters: FilesApiFilesFileDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.filesFileDestroy(requestParameters.file_number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesFileListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileList(requestParameters: FilesApiFilesFileListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedFileRecordListList> {
            return localVarFp.filesFileList(requestParameters.bookmarked, requestParameters.city, requestParameters.construction_year_max, requestParameters.construction_year_min, requestParameters.created_at_after, requestParameters.created_at_before, requestParameters.district, requestParameters.estate_direction, requestParameters.estate_owner_name, requestParameters.estate_owner_phone, requestParameters.estate_tags, requestParameters.estate_type, requestParameters.file_source, requestParameters.floors_count_max, requestParameters.floors_count_min, requestParameters.has_document, requestParameters.has_elevator, requestParameters.has_license, requestParameters.has_termination, requestParameters.has_warehouse, requestParameters.land_meterage_max, requestParameters.land_meterage_min, requestParameters.mortgage_price_max, requestParameters.mortgage_price_min, requestParameters.page, requestParameters.page_size, requestParameters.per_meter_price_max, requestParameters.per_meter_price_min, requestParameters.rent_price_max, requestParameters.rent_price_min, requestParameters.rooms_count, requestParameters.search, requestParameters.toilets_count, requestParameters.total_price_max, requestParameters.total_price_min, requestParameters.trade_type, requestParameters.unit_direction, requestParameters.unit_meterage_max, requestParameters.unit_meterage_min, requestParameters.units_per_floor_number_max, requestParameters.units_per_floor_number_min, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesFilePartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFilePartialUpdate(requestParameters: FilesApiFilesFilePartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileRecord> {
            return localVarFp.filesFilePartialUpdate(requestParameters.file_number, requestParameters.PatchedFileRecordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesFileRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileRetrieve(requestParameters: FilesApiFilesFileRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileRecordRetrieve> {
            return localVarFp.filesFileRetrieve(requestParameters.file_number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesFileUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileUpdate(requestParameters: FilesApiFilesFileUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileRecord> {
            return localVarFp.filesFileUpdate(requestParameters.file_number, requestParameters.FileRecordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesTagList(options?: RawAxiosRequestConfig): AxiosPromise<Array<EstateTag>> {
            return localVarFp.filesTagList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilesApiFilesUploadImageCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesUploadImageCreate(requestParameters: FilesApiFilesUploadImageCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Image> {
            return localVarFp.filesUploadImageCreate(requestParameters.ImageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesFileCreate operation in FilesApi.
 * @export
 * @interface FilesApiFilesFileCreateRequest
 */
export interface FilesApiFilesFileCreateRequest {
    /**
     * 
     * @type {FileRecordRequest}
     * @memberof FilesApiFilesFileCreate
     */
    readonly FileRecordRequest: FileRecordRequest
}

/**
 * Request parameters for filesFileDestroy operation in FilesApi.
 * @export
 * @interface FilesApiFilesFileDestroyRequest
 */
export interface FilesApiFilesFileDestroyRequest {
    /**
     * 
     * @type {number}
     * @memberof FilesApiFilesFileDestroy
     */
    readonly file_number: number
}

/**
 * Request parameters for filesFileList operation in FilesApi.
 * @export
 * @interface FilesApiFilesFileListRequest
 */
export interface FilesApiFilesFileListRequest {
    /**
     * نشان شده
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly bookmarked?: boolean

    /**
     * شهر
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly city?: number

    /**
     * سال ساخت
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly construction_year_max?: number

    /**
     * سال ساخت
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly construction_year_min?: number

    /**
     * تاریخ ایجاد
     * @type {string}
     * @memberof FilesApiFilesFileList
     */
    readonly created_at_after?: string

    /**
     * تاریخ ایجاد
     * @type {string}
     * @memberof FilesApiFilesFileList
     */
    readonly created_at_before?: string

    /**
     * محله
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly district?: number

    /**
     * جهت ملک  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;TRIPLE_CORNERS&#x60; - سه نبشه
     * @type {'DOUBLE_CORNERS' | 'EASTERN' | 'NORTHERN' | 'SOUTHERN' | 'TRIPLE_CORNERS' | 'WESTERN'}
     * @memberof FilesApiFilesFileList
     */
    readonly estate_direction?: FilesFileListEstateDirectionEnum

    /**
     * نام مالک
     * @type {string}
     * @memberof FilesApiFilesFileList
     */
    readonly estate_owner_name?: string

    /**
     * شماره  صاحب ملک
     * @type {string}
     * @memberof FilesApiFilesFileList
     */
    readonly estate_owner_phone?: string

    /**
     * برچسب های ملک
     * @type {Array<number>}
     * @memberof FilesApiFilesFileList
     */
    readonly estate_tags?: Array<number>

    /**
     * نوع ملک  * &#x60;APARTMENT&#x60; - آپارتمان * &#x60;HOUSE&#x60; - خانه/ویلا * &#x60;LAND&#x60; - زمین * &#x60;COMMERCIAL&#x60; - اداری/تجاری
     * @type {'APARTMENT' | 'COMMERCIAL' | 'HOUSE' | 'LAND'}
     * @memberof FilesApiFilesFileList
     */
    readonly estate_type?: FilesFileListEstateTypeEnum

    /**
     * File Source  * &#x60;DIVAR&#x60; - دیوار * &#x60;DAFTAR_FILE&#x60; - دفتر فایل
     * @type {'DAFTAR_FILE' | 'DIVAR'}
     * @memberof FilesApiFilesFileList
     */
    readonly file_source?: FilesFileListFileSourceEnum

    /**
     * تعداد طبقات
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly floors_count_max?: number

    /**
     * تعداد طبقات
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly floors_count_min?: number

    /**
     * سند دارد؟
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly has_document?: boolean

    /**
     * آسانسور دارد؟
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly has_elevator?: boolean

    /**
     * جواز دارد؟
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly has_license?: boolean

    /**
     * پایان کار دارد؟
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly has_termination?: boolean

    /**
     * انباری دارد؟
     * @type {boolean}
     * @memberof FilesApiFilesFileList
     */
    readonly has_warehouse?: boolean

    /**
     * متراژ زمین
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly land_meterage_max?: number

    /**
     * متراژ زمین
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly land_meterage_min?: number

    /**
     * قیمت رهن
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly mortgage_price_max?: number

    /**
     * قیمت رهن
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly mortgage_price_min?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly page_size?: number

    /**
     * قیمت هر متر
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly per_meter_price_max?: number

    /**
     * قیمت هر متر
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly per_meter_price_min?: number

    /**
     * قیمت اجاره
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly rent_price_max?: number

    /**
     * قیمت اجاره
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly rent_price_min?: number

    /**
     * تعداد اتاق خواب  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
     * @type {1 | 2 | 3 | 4 | 5 | 6}
     * @memberof FilesApiFilesFileList
     */
    readonly rooms_count?: FilesFileListRoomsCountEnum

    /**
     * جستجو
     * @type {string}
     * @memberof FilesApiFilesFileList
     */
    readonly search?: string

    /**
     * تعداد سرویس بهداشتی  * &#x60;1&#x60; - 1 * &#x60;2&#x60; - 2 * &#x60;3&#x60; - 3 * &#x60;4&#x60; - 4 * &#x60;5&#x60; - 5 * &#x60;6&#x60; - 6
     * @type {1 | 2 | 3 | 4 | 5 | 6}
     * @memberof FilesApiFilesFileList
     */
    readonly toilets_count?: FilesFileListToiletsCountEnum

    /**
     * قیمت کل
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly total_price_max?: number

    /**
     * قیمت کل
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly total_price_min?: number

    /**
     * نوع معامله  * &#x60;BUY_SELL&#x60; - خرید و فروش * &#x60;RENT_CREDIT&#x60; -  رهن و اجاره
     * @type {'BUY_SELL' | 'RENT_CREDIT'}
     * @memberof FilesApiFilesFileList
     */
    readonly trade_type?: FilesFileListTradeTypeEnum

    /**
     * جهت واحد  * &#x60;NORTHERN&#x60; - شمالی * &#x60;SOUTHERN&#x60; - جنوبی * &#x60;EASTERN&#x60; - شرقی * &#x60;WESTERN&#x60; - غربی * &#x60;DOUBLE_CORNERS&#x60; - دو نبشه * &#x60;MIDDLE&#x60; - میانی
     * @type {'DOUBLE_CORNERS' | 'EASTERN' | 'MIDDLE' | 'NORTHERN' | 'SOUTHERN' | 'WESTERN'}
     * @memberof FilesApiFilesFileList
     */
    readonly unit_direction?: FilesFileListUnitDirectionEnum

    /**
     * متراژ واحد
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly unit_meterage_max?: number

    /**
     * متراژ واحد
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly unit_meterage_min?: number

    /**
     * تعداد واحد در هر طبقه
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly units_per_floor_number_max?: number

    /**
     * تعداد واحد در هر طبقه
     * @type {number}
     * @memberof FilesApiFilesFileList
     */
    readonly units_per_floor_number_min?: number
}

/**
 * Request parameters for filesFilePartialUpdate operation in FilesApi.
 * @export
 * @interface FilesApiFilesFilePartialUpdateRequest
 */
export interface FilesApiFilesFilePartialUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof FilesApiFilesFilePartialUpdate
     */
    readonly file_number: number

    /**
     * 
     * @type {PatchedFileRecordRequest}
     * @memberof FilesApiFilesFilePartialUpdate
     */
    readonly PatchedFileRecordRequest?: PatchedFileRecordRequest
}

/**
 * Request parameters for filesFileRetrieve operation in FilesApi.
 * @export
 * @interface FilesApiFilesFileRetrieveRequest
 */
export interface FilesApiFilesFileRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof FilesApiFilesFileRetrieve
     */
    readonly file_number: number
}

/**
 * Request parameters for filesFileUpdate operation in FilesApi.
 * @export
 * @interface FilesApiFilesFileUpdateRequest
 */
export interface FilesApiFilesFileUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof FilesApiFilesFileUpdate
     */
    readonly file_number: number

    /**
     * 
     * @type {FileRecordRequest}
     * @memberof FilesApiFilesFileUpdate
     */
    readonly FileRecordRequest: FileRecordRequest
}

/**
 * Request parameters for filesUploadImageCreate operation in FilesApi.
 * @export
 * @interface FilesApiFilesUploadImageCreateRequest
 */
export interface FilesApiFilesUploadImageCreateRequest {
    /**
     * 
     * @type {ImageRequest}
     * @memberof FilesApiFilesUploadImageCreate
     */
    readonly ImageRequest: ImageRequest
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @param {FilesApiFilesFileCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileCreate(requestParameters: FilesApiFilesFileCreateRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileCreate(requestParameters.FileRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesFileDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileDestroy(requestParameters: FilesApiFilesFileDestroyRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileDestroy(requestParameters.file_number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesFileListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileList(requestParameters: FilesApiFilesFileListRequest = {}, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileList(requestParameters.bookmarked, requestParameters.city, requestParameters.construction_year_max, requestParameters.construction_year_min, requestParameters.created_at_after, requestParameters.created_at_before, requestParameters.district, requestParameters.estate_direction, requestParameters.estate_owner_name, requestParameters.estate_owner_phone, requestParameters.estate_tags, requestParameters.estate_type, requestParameters.file_source, requestParameters.floors_count_max, requestParameters.floors_count_min, requestParameters.has_document, requestParameters.has_elevator, requestParameters.has_license, requestParameters.has_termination, requestParameters.has_warehouse, requestParameters.land_meterage_max, requestParameters.land_meterage_min, requestParameters.mortgage_price_max, requestParameters.mortgage_price_min, requestParameters.page, requestParameters.page_size, requestParameters.per_meter_price_max, requestParameters.per_meter_price_min, requestParameters.rent_price_max, requestParameters.rent_price_min, requestParameters.rooms_count, requestParameters.search, requestParameters.toilets_count, requestParameters.total_price_max, requestParameters.total_price_min, requestParameters.trade_type, requestParameters.unit_direction, requestParameters.unit_meterage_max, requestParameters.unit_meterage_min, requestParameters.units_per_floor_number_max, requestParameters.units_per_floor_number_min, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesFilePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFilePartialUpdate(requestParameters: FilesApiFilesFilePartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFilePartialUpdate(requestParameters.file_number, requestParameters.PatchedFileRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesFileRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileRetrieve(requestParameters: FilesApiFilesFileRetrieveRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileRetrieve(requestParameters.file_number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesFileUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileUpdate(requestParameters: FilesApiFilesFileUpdateRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileUpdate(requestParameters.file_number, requestParameters.FileRecordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesTagList(options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesTagList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilesApiFilesUploadImageCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesUploadImageCreate(requestParameters: FilesApiFilesUploadImageCreateRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesUploadImageCreate(requestParameters.ImageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const FilesFileListEstateDirectionEnum = {
    DoubleCorners: 'DOUBLE_CORNERS',
    Eastern: 'EASTERN',
    Northern: 'NORTHERN',
    Southern: 'SOUTHERN',
    TripleCorners: 'TRIPLE_CORNERS',
    Western: 'WESTERN'
} as const;
export type FilesFileListEstateDirectionEnum = typeof FilesFileListEstateDirectionEnum[keyof typeof FilesFileListEstateDirectionEnum];
/**
 * @export
 */
export const FilesFileListEstateTypeEnum = {
    Apartment: 'APARTMENT',
    Commercial: 'COMMERCIAL',
    House: 'HOUSE',
    Land: 'LAND'
} as const;
export type FilesFileListEstateTypeEnum = typeof FilesFileListEstateTypeEnum[keyof typeof FilesFileListEstateTypeEnum];
/**
 * @export
 */
export const FilesFileListFileSourceEnum = {
    DaftarFile: 'DAFTAR_FILE',
    Divar: 'DIVAR'
} as const;
export type FilesFileListFileSourceEnum = typeof FilesFileListFileSourceEnum[keyof typeof FilesFileListFileSourceEnum];
/**
 * @export
 */
export const FilesFileListRoomsCountEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;
export type FilesFileListRoomsCountEnum = typeof FilesFileListRoomsCountEnum[keyof typeof FilesFileListRoomsCountEnum];
/**
 * @export
 */
export const FilesFileListToiletsCountEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;
export type FilesFileListToiletsCountEnum = typeof FilesFileListToiletsCountEnum[keyof typeof FilesFileListToiletsCountEnum];
/**
 * @export
 */
export const FilesFileListTradeTypeEnum = {
    BuySell: 'BUY_SELL',
    RentCredit: 'RENT_CREDIT'
} as const;
export type FilesFileListTradeTypeEnum = typeof FilesFileListTradeTypeEnum[keyof typeof FilesFileListTradeTypeEnum];
/**
 * @export
 */
export const FilesFileListUnitDirectionEnum = {
    DoubleCorners: 'DOUBLE_CORNERS',
    Eastern: 'EASTERN',
    Middle: 'MIDDLE',
    Northern: 'NORTHERN',
    Southern: 'SOUTHERN',
    Western: 'WESTERN'
} as const;
export type FilesFileListUnitDirectionEnum = typeof FilesFileListUnitDirectionEnum[keyof typeof FilesFileListUnitDirectionEnum];
